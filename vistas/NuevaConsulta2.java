/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import bd.Conexion;
import dao.ConsultaDAO;
import dao.HCDAO;
import dao.ImagenDAO;
import dao.RecetaDAO;
import entidades.Consulta;
import entidades.Imagen;
import entidades.Receta;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Usuario
 */
public class NuevaConsulta2 extends javax.swing.JDialog implements ActionListener {

    NCDatos1 p1 = new NCDatos1();
    NCDatos2 p2 = new NCDatos2();

    BuscarPaciente2 listadoPacientes = new BuscarPaciente2(new javax.swing.JDialog(), true);

    JDialog nc = this;

    /**
     * Creates new form NuevaConsulta2
     */
    public NuevaConsulta2(javax.swing.JFrame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        txtIdPaciente.setVisible(false);
        txtIdConsulta.setVisible(false);
        Calendar c2 = new GregorianCalendar();
        jdFecha.setCalendar(c2);

        p1.setSize(800, 430);
        p1.setLocation(0, 0);
        p2.setSize(800, 430);
        p2.setLocation(0, 0);
        content.add(p1, BorderLayout.CENTER);
        p1.setVisible(true);
        p2.setVisible(false);
        content.revalidate();
        content.repaint();

        btGuardar.addActionListener(this);
        btSiguiente.addActionListener(this);
        btAtras.addActionListener(this);
        btAtras.setVisible(false);

        if (!txtIdConsulta.getText().equals("")) {
            datosReceta(Integer.parseInt(txtIdConsulta.getText()));
        }

        lblLoading.setVisible(false);

    }

    public void datosReceta(int idConsulta) {
        HCDAO hc = new HCDAO();

        try {
            ArrayList<Receta> receta = hc.datosReceta(idConsulta);

            DefaultTableModel modelo = new DefaultTableModel() {

                @Override
                public boolean isCellEditable(int row, int col) {
                    return false;
                }
            };

            modelo.addColumn("Medicamento");
            modelo.addColumn("Cantidad");

            for (Receta r : receta) {
                String[] fila = new String[2];
                fila[0] = r.getNombreMedicamento();
                fila[1] = String.valueOf(r.getCantidad());

                modelo.addRow(fila);
            }

            p2.tblReceta.setModel(modelo);

        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        btAtras = new javax.swing.JButton();
        btGuardar = new javax.swing.JButton();
        lblNCTitle = new javax.swing.JLabel();
        btSiguiente = new javax.swing.JButton();
        content = new javax.swing.JPanel();
        lblPaciente = new javax.swing.JLabel();
        txtPaciente = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jdFecha = new com.toedter.calendar.JDateChooser();
        txtIdPaciente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btImpReceta = new javax.swing.JButton();
        txtIdConsulta = new javax.swing.JTextField();
        lblLoading = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel2.setText("Fecha *");

        btAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/anterior.png"))); // NOI18N
        btAtras.setText("Atr√°s");
        btAtras.setFocusable(false);
        btAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAtrasActionPerformed(evt);
            }
        });

        btGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/disco-flexible.png"))); // NOI18N
        btGuardar.setText("Guardar");
        btGuardar.setFocusable(false);
        btGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btGuardarActionPerformed(evt);
            }
        });

        lblNCTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNCTitle.setText("Nueva Consulta");
        lblNCTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/siguiente-boton.png"))); // NOI18N
        btSiguiente.setText("Siguiente");
        btSiguiente.setFocusable(false);
        btSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSiguienteActionPerformed(evt);
            }
        });

        content.setPreferredSize(new java.awt.Dimension(800, 450));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 450, Short.MAX_VALUE)
        );

        lblPaciente.setText("Paciente *");

        txtPaciente.setEditable(false);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/lupa.png"))); // NOI18N
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtIdPaciente.setEditable(false);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/doctor 128px.png"))); // NOI18N

        btImpReceta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icono_imprimir.png"))); // NOI18N
        btImpReceta.setText("Imprimir receta");
        btImpReceta.setFocusable(false);
        btImpReceta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImpRecetaActionPerformed(evt);
            }
        });

        txtIdConsulta.setEditable(false);

        lblLoading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Spinner-1s-64px.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(btAtras)
                        .addGap(51, 51, 51)
                        .addComponent(btSiguiente)
                        .addGap(88, 88, 88)
                        .addComponent(btGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(btImpReceta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblNCTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(lblPaciente))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtIdPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtIdConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(lblNCTitle)
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jdFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtIdPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtIdConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblPaciente)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(content, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btAtras)
                        .addComponent(btSiguiente)
                        .addComponent(btGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btImpReceta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAtrasActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btAtrasActionPerformed

    private void btGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btGuardarActionPerformed

    private void btSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSiguienteActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btSiguienteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        listadoPacientes.setLocationRelativeTo(this);
        //listadoPacientes.setVisible(true);

        String[] valores = listadoPacientes.obtenerNombres();
        String nombres = valores[0];
        String id = valores[1];
        txtPaciente.setText(nombres);
        txtIdPaciente.setText(id);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btImpRecetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImpRecetaActionPerformed
        // TODO add your handling code here:
        new _LoadImprimirReceta().show();
    }//GEN-LAST:event_btImpRecetaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NuevaConsulta2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NuevaConsulta2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NuevaConsulta2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NuevaConsulta2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NuevaConsulta2 dialog = new NuevaConsulta2(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAtras;
    private javax.swing.JButton btGuardar;
    private javax.swing.JButton btImpReceta;
    private javax.swing.JButton btSiguiente;
    private javax.swing.JPanel content;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    public static com.toedter.calendar.JDateChooser jdFecha;
    private javax.swing.JLabel lblLoading;
    public static javax.swing.JLabel lblNCTitle;
    private javax.swing.JLabel lblPaciente;
    public static javax.swing.JTextField txtIdConsulta;
    public static javax.swing.JTextField txtIdPaciente;
    public javax.swing.JTextField txtPaciente;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        Object evt = e.getSource();

        if (evt.equals(btSiguiente)) {
            p1.setVisible(false);
            p2.setVisible(true);
            content.add(p2);
            content.validate();
            btSiguiente.setVisible(false);
            btAtras.setVisible(true);
        }

        if (evt.equals(btAtras)) {
            p2.setVisible(false);
            p1.setVisible(true);
            content.add(p1);
            content.validate();
            btAtras.setVisible(false);
            btSiguiente.setVisible(true);
        }

        if (evt.equals(btGuardar)) {

            new _LoadGuardarConsulta().show();
        }
    }

    private void guardarConsulta(boolean imprimeReceta) {

        boolean cantidades_ok = true;

        if (p2.tblReceta.isEditing()) {//si se esta edtando la tabla
            p2.tblReceta.getCellEditor().stopCellEditing();//detenga la edicion
        }

        for (int i = 0; i < p2.tblReceta.getRowCount(); i++) {
            //System.out.println(p2.tblReceta.getValueAt(i, 0));
            //System.out.println(p2.tblReceta.getValueAt(i, 1));
            if (p2.tblReceta.getValueAt(i, 0) != null
                    && (p2.tblReceta.getValueAt(i, 1) == null || p2.tblReceta.getValueAt(i, 1) == "")) {

                cantidades_ok = false;

            }

        }

        if (!txtIdPaciente.getText().equals("") && jdFecha.getDate() != null
                && !p1.txtMotivo.getText().equals("") && !p1.txtCuadroClinico.getText().equals("")
                && !p2.txtDiagnostico.getText().equals("") && !p2.txtTratamiento.getText().equals("")) {

            if (cantidades_ok == true) {
                try {

                    Consulta c = new Consulta();
                    c.setIdPaciente(Integer.parseInt(txtIdPaciente.getText()));
                    c.setFecha(jdFecha.getDate());

                    if (!p1.txtTalla.getText().equals("")) {
                        c.setTalla(Double.parseDouble(p1.txtTalla.getText()));
                    }
                    if (!p1.txtPeso.getText().equals("")) {
                        c.setPeso(Double.parseDouble(p1.txtPeso.getText()));
                    }
                    if (!p1.txtImc.getText().equals("")) {
                        c.setImc(Double.parseDouble(p1.txtImc.getText()));
                    }
                    if (!p1.txtTemperatura.getText().equals("")) {
                        c.setTemperatura(Double.parseDouble(p1.txtTemperatura.getText()));
                    }
                    if (!p1.txtPulso.getText().equals("")) {
                        c.setPulso(Integer.parseInt(p1.txtPulso.getText()));
                    }
                    c.setPresionArterial(p1.txtPresionA.getText());
                    c.setDescripcion(p1.txtMotivo.getText());
                    c.setCuadroClinico(p1.txtCuadroClinico.getText());
                    c.setExamenesComplementarios(p1.txtExamenesComplementarios.getText());
                    c.setDiagnostico(p2.txtDiagnostico.getText());
                    c.setTratamiento(p2.txtTratamiento.getText());
                    c.setReceta("");

                    ConsultaDAO cDAO = new ConsultaDAO();

                    if (txtIdConsulta.getText().equals("")) {
                        int idConsulta = cDAO.agregarConsulta(c);
                        if (idConsulta != 0) {
                            txtIdConsulta.setText(String.valueOf(idConsulta));
                            insertarItemsReceta(idConsulta);
                            insertarImagenes(idConsulta);
                            if (!imprimeReceta) {
                                JOptionPane.showMessageDialog(this, "Guardado correctamente");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un evento");
                        }
                    } else {
                        c.setId(Integer.parseInt(txtIdConsulta.getText()));
                        if (cDAO.actualizarConsulta(c)) {
                            RecetaDAO rDAO = new RecetaDAO();
                            rDAO.eliminarItemsReceta(Integer.parseInt(txtIdConsulta.getText()));
                            insertarItemsReceta(Integer.parseInt(txtIdConsulta.getText()));
                            ImagenDAO imgDAO = new ImagenDAO();
                            imgDAO.eliminarImagenes(Integer.parseInt(txtIdConsulta.getText()));
                            insertarImagenes(Integer.parseInt(txtIdConsulta.getText()));
                            if (!imprimeReceta) {
                                JOptionPane.showMessageDialog(this, "Datos actualizados correctamente");
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "Ha ocurrido un evento");
                        }
                    }
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un evento: " + ex.getMessage());
                }
            } else {
                JOptionPane.showMessageDialog(this, "Solo ingresar n√∫meros en cantidad de receta");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Complete los campos obligatorios (*)");
        }
    }

    private void insertarItemsReceta(int idConsulta) {

        for (int i = 0; i < p2.tblReceta.getRowCount(); i++) {
            Receta r = new Receta();
            r.setIdConsulta(idConsulta);
            if (p2.tblReceta.getValueAt(i, 0) != null) {
                r.setNombreMedicamento(p2.tblReceta.getValueAt(i, 0).toString());
            }
            if (p2.tblReceta.getValueAt(i, 1) != null) {
                r.setCantidad(Integer.parseInt(p2.tblReceta.getValueAt(i, 1).toString()));
            }

            RecetaDAO rDAO = new RecetaDAO();
            if (p2.tblReceta.getValueAt(i, 0) != null) {
                try {
                    rDAO.agregarItemReceta(r);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, "Ha ocurrido un evento: " + ex.getMessage());
                }
            }
        }
    }

    private void insertarImagenes(int idConsulta) {

        for (int i = 0; i < p2.tblImagenes.getRowCount(); i++) {
            Imagen img = new Imagen();
            img.setIdConsulta(idConsulta);
            String nombre = p2.tblImagenes.getValueAt(i, 0).toString();
            img.setNombre(p2.tblImagenes.getValueAt(i, 0).toString());
            String rutaArchivo = p2.tblImagenes.getValueAt(i, 1).toString();
            File ruta = new File(rutaArchivo);
            try {
                byte[] archivo = new byte[(int) ruta.length()];
                InputStream input = new FileInputStream(ruta);
                input.read(archivo);
                img.setArchivo(archivo);
            } catch (IOException ex) {
                img.setArchivo(null);
                JOptionPane.showMessageDialog(this, "Ha ocurrido un evento: " + ex.getMessage());
            }
            int n = nombre.lastIndexOf(".");
            String ext = nombre.substring(n);
            img.setExtension(ext);
            img.setRuta(rutaArchivo);

            ImagenDAO imgDAO = new ImagenDAO();
            try {
                imgDAO.agregarImagen(img);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un evento: " + ex.getMessage());
            }
        }
    }

    private void imprimirReceta() {

        if (!txtIdPaciente.getText().equals("") && jdFecha.getDate() != null
                && !p1.txtMotivo.getText().equals("") && !p1.txtCuadroClinico.getText().equals("")
                && !p2.txtDiagnostico.getText().equals("") && !p2.txtTratamiento.getText().equals("")) {

            guardarConsulta(true);

            Conexion cn = new Conexion();
            //String path = "C:\\HistorialClinico\\src\\reportes\\recetario.jasper";
            String path = "/reportes/recetario.jasper";
            URL in = this.getClass().getResource("/reportes/recetario.jasper");
            JasperReport jr = null;
            Map<String, Object> parametros = new HashMap<String, Object>();
            parametros.put("ID_CONSULTA", txtIdConsulta.getText());
            parametros.put("imagen", this.getClass().getResourceAsStream("/reportes/simbolo_medicina.png"));

            try {
                //jr = (JasperReport) JRLoader.loadObjectFromFile(path);
                jr = (JasperReport) JRLoader.loadObject(in);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, cn.conectar());
                JasperViewer jv = new JasperViewer(jp, false);
                this.setVisible(false);
                jv.setVisible(true);
                jv.setTitle("Receta");

                jv.addWindowListener(new WindowAdapter() {
                    @Override
                    public void windowClosing(WindowEvent e) {

                        nc.setVisible(true);
                    }
                });

            } catch (JRException ex) {

                JOptionPane.showMessageDialog(this, "Ha ocurrido un evento " + ex.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Complete los campos obligatorios (*)");
        }
    }

    public class _LoadGuardarConsulta implements Runnable {

        public void show() {
            new Thread(this).start();
        }

        public void run() {
            lblLoading.setVisible(true);

            guardarConsulta(false);

            lblLoading.setVisible(false);

        }
    }

    public class _LoadImprimirReceta implements Runnable {

        public void show() {
            new Thread(this).start();
        }

        public void run() {
            lblLoading.setVisible(true);

            imprimirReceta();

            lblLoading.setVisible(false);

        }
    }
}
